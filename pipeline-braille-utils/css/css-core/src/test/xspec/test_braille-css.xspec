<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:css="http://www.daisy.org/ns/pipeline/braille-css"
               stylesheet="../../main/resources/xml/braille-css.xsl">
	
	<x:scenario label="test_01">
		<x:call function="css:property">
			<x:param select="'left'"/>
			<x:param select="'auto'"/>
		</x:call>
		<x:expect label="result">
			<css:property name="left" value="auto"/>
		</x:expect>
	</x:scenario>
	
	<x:scenario label="test_02">
		<x:call function="css:property">
			<x:param select="'left'"/>
			<x:param select="xs:integer(2)"/>
		</x:call>
		<x:expect label="result">
			<css:property name="left" value="2.0"/>
		</x:expect>
	</x:scenario>
	
	<x:scenario label="test_03">
		<x:call function="css:specified-properties">
			<x:param select="'#all invalid'"/>
			<x:param select="true()"/>
			<x:param select="true()"/>
			<x:param select="true()"/>
			<x:param select="//bar">
				<foo style="display: block">
					<bar style="display: inherit; left: invalid; page-break-before: initial; string-set: print-page attr(num)"/>
				</foo>
			</x:param>
		</x:call>
		<x:expect label="result">
			<css:property name="display" value="block"/>
			<css:property name="page-break-before" value="auto"/>
			<css:property name="string-set" value="print-page attr(num)"/>
		</x:expect>
	</x:scenario>
	
	<x:scenario label="test_04">
		<x:call function="css:parse-stylesheet">
			<x:param select="'@page { size: 40 25;}   {display:block}'"/>
		</x:call>
		<x:expect label="result">
			<css:rule selector="@page" declaration-list="size: 40 25;"/>
			<css:rule declaration-list="display:block"/>
		</x:expect>
	</x:scenario>
	
	<x:scenario label="test_05" >
		<x:call function="css:parse-stylesheet">
			<x:param select="'::before { content: &quot; } &quot; }
			                 {display:block}
			                 @page { size: 40 25 @top-right-corner { content: &quot; } &quot; }}'"/>
		</x:call>
		<x:expect label="result">
			<css:rule selector="::before" declaration-list="content: &quot; }} &quot;"/>
			<css:rule declaration-list="display:block"/>
			<css:rule selector="@page" declaration-list="size: 40 25 @top-right-corner {{ content: &quot; }} &quot; }}"/>
		</x:expect>
	</x:scenario>
	
	<x:scenario label="test_06">
		<x:call function="css:parse-stylesheet">
			<x:param select="'@page { size: 15 15; @bottom-right { content: counter(braille-page, lower-roman) }'"/>
		</x:call>
		<x:expect label="result">
			<css:rule selector="@bottom-right" declaration-list="content: counter(braille-page, lower-roman)"/>
		</x:expect>
	</x:scenario>
	
	<x:scenario label="test_07">
		<x:call function="css:parse-declaration-list">
			<x:param select="'  display: none;  string-set : print-page attr(value) ;  '"/>
		</x:call>
		<x:expect label="result">
			<css:property name="display" value="none"/>
			<css:property name="string-set" value="print-page attr(value)"/>
		</x:expect>
	</x:scenario>
	
	<x:scenario label="test_08">
		<x:call function="css:parse-content-list">
			<x:param select="'target-string(attr(ref url), print-page) counter(braille-page, lower-roman)'"/>
			<x:param select="//a">
				<doc>
					<a ref="#foo">foo</a>
				</doc>
			</x:param>
		</x:call>
		<x:expect label="result">
			<css:target-string-fn target="#foo" identifier="print-page"/>
			<css:counter-fn identifier="braille-page" style="lower-roman"/>
		</x:expect>
	</x:scenario>
	
	<x:scenario label="test_09">
		<x:context mode="css:serialize">
			<css:target-string-fn target="#foo" identifier="print-page"/>
		</x:context>
		<x:expect label="result" select="'target-string(#foo, print-page)'"/>
	</x:scenario>
	
	<x:scenario label="test_10">
		<x:call function="css:serialize-stylesheet">
			<x:param>
				<css:rule selector="@page" declaration-list="size: 40 25;"/>
				<css:rule declaration-list="display:block"/>
			</x:param>
		</x:call>
		<x:expect label="result" select="'@page { size: 40 25; } { display:block }'"/>
	</x:scenario>
	
	<x:scenario label="test_11">
		<x:call function="css:serialize-declaration-list">
			<x:param>
				<css:property name="display" value="none"/>
				<css:property name="string-set" value="print-page attr(value)"/>
			</x:param>
		</x:call>
		<x:expect label="result" select="'display: none; string-set: print-page attr(value)'"/>
	</x:scenario>
	
	<x:scenario label="test_12">
		<x:context mode="css:eval">
			<css:string value="foobar"/>
		</x:context>
		<x:expect label="result" select="&quot;foobar&quot;"/>
	</x:scenario>
	
</x:description>
